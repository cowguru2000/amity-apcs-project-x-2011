/**
 * Copyright (c) 2011 Amity AP CS A Students of 2010-2011.
 *
 * ex: set filetype=java expandtab tabstop=4 shiftwidth=4 :
 *
 * This program is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * This code is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * This code is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation.
 */
package org.amityregion5.projectx.client.gui;

import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.List;

import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

import org.amityregion5.projectx.client.communication.CommunicationHandler;
import org.amityregion5.projectx.client.handlers.PreferenceManager;
import org.amityregion5.projectx.common.communication.MessageListener;
import org.amityregion5.projectx.common.communication.messages.ActivePlayersMessage;
import org.amityregion5.projectx.common.communication.messages.AnnounceMessage;
import org.amityregion5.projectx.common.communication.messages.ChatMessage;
import org.amityregion5.projectx.common.communication.messages.GoodbyeMessage;
import org.amityregion5.projectx.common.communication.messages.IntroduceMessage;
import org.amityregion5.projectx.common.communication.messages.Message;
import org.amityregion5.projectx.common.communication.messages.StatusUpdateMessage;

/**
 * The game lobby 
 * TODO: finish implementing it! (I mean with initializing the game and such)
 * 
 * @author Daniel Centore
 * @author Joe Stein
 */
public class LobbyWindow extends JFrame implements MessageListener {

    private static final long serialVersionUID = 1L;

    private DefaultListModel playerListModel; // the model we change for players
    private CommunicationHandler ch; // the communication with the server

    /**
     * Creates a new LobbyWindow.
     * 
     * @param sock the socket that was connected to the server after choosing
     * @param players the players that were already in this lobby. Can be empty or null.
     */
    public LobbyWindow(CommunicationHandler ch, List<String> players)
    {
        super("Project X Lobby");

        // adds a window listener so we can tell the server when we leave
        this.addWindowListener(new CustomWindowAdapter());

        this.ch = ch;
        ch.registerListener(this);
        playerListModel = new DefaultListModel();
        initComponents();
        playerListModel.addElement(PreferenceManager.getUsername());
        if(players != null)
        {
            for(String player : players)
            {
                playerListModel.addElement(player);
            }
        }
        playerList.setModel(playerListModel);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jScrollPane1 = new javax.swing.JScrollPane();
        chatLogArea = new javax.swing.JTextArea();
        chatField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        playerList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        sendBtn = new javax.swing.JButton();
        statusLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        chatLogArea.setColumns(20);
        chatLogArea.setEditable(false);
        chatLogArea.setRows(5);
        jScrollPane1.setViewportView(chatLogArea);

        chatField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                chatFieldKeyPressed(evt);
            }
        });

        jScrollPane2.setViewportView(playerList);

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 18));
        jLabel1.setText("Chat");

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 18));
        jLabel2.setText("Players");

        sendBtn.setText("Send");
        sendBtn.setEnabled(false);
        sendBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                sendBtnActionPerformed(evt);
            }
        });

        statusLabel.setText("Waiting for players...");
        statusLabel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Status", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup().addContainerGap().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE).addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE).addGroup(layout.createSequentialGroup().addComponent(chatField, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(sendBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))).addGap(18, 18, 18).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE).addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)).addContainerGap()));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel1).addComponent(jLabel2)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(chatField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(sendBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))).addGroup(layout.createSequentialGroup().addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))).addContainerGap()));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendBtnActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_sendBtnActionPerformed
    {// GEN-HEADEREND:event_sendBtnActionPerformed
        sendChat();

    }// GEN-LAST:event_sendBtnActionPerformed

    private void chatFieldKeyPressed(java.awt.event.KeyEvent evt)// GEN-FIRST:event_chatFieldKeyPressed
    {// GEN-HEADEREND:event_chatFieldKeyPressed
        int keycode = evt.getKeyCode();
        if(keycode == KeyEvent.VK_ENTER)
        {
            if(chatField.getText().length() > 0)
            {
                sendChat();
            }
        }
        else if(keycode == KeyEvent.VK_BACK_SPACE && chatField.getText().length() <= 1)
        {
            if(sendBtn.isEnabled())
            {
                SwingUtilities.invokeLater(new Runnable() {

                    public void run()
                    {
                        sendBtn.setEnabled(false);
                    }
                });
            }
        }
        else
        {
            if(!sendBtn.isEnabled())
            {
                SwingUtilities.invokeLater(new Runnable() {

                    public void run()
                    {
                        sendBtn.setEnabled(true);
                    }
                });
            }
        }
    }// GEN-LAST:event_chatFieldKeyPressed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField chatField;
    private javax.swing.JTextArea chatLogArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList playerList;
    private javax.swing.JButton sendBtn;
    private javax.swing.JLabel statusLabel;

    // End of variables declaration//GEN-END:variables
    @Override
    public void handle(final Message m)
    {
        if(m instanceof ChatMessage)
        {
            ChatMessage cm = (ChatMessage) m;
            final String toShow = cm.getFrom() + ": " + cm.getText();
            SwingUtilities.invokeLater(new Runnable() {

                public void run()
                {
                    chatLogArea.append(toShow + "\n");
                    // automatically scroll down
                    chatLogArea.setCaretPosition(chatLogArea.getDocument().getLength());
                }
            });

        }
        else if(m instanceof IntroduceMessage)
        {
            SwingUtilities.invokeLater(new Runnable() {

                public void run()
                {
                    playerListModel.addElement(((IntroduceMessage) m).getText());
                }
            });
        }
        else if(m instanceof ActivePlayersMessage)
        {
            SwingUtilities.invokeLater(new Runnable() {

                public void run()
                {
                    List<String> usernames = ((ActivePlayersMessage) m).getPlayers();

                    for(String q : usernames)
                        playerListModel.addElement(q);
                }
            });
        }
        else if(m instanceof GoodbyeMessage)
        {
            SwingUtilities.invokeLater(new Runnable() {

                public void run()
                {
                    playerListModel.removeElement(((GoodbyeMessage) m).getText());
                }
            });
        }
        else if(m instanceof StatusUpdateMessage)
        {
            final StatusUpdateMessage sum = (StatusUpdateMessage) m;
            if(sum.getType() == StatusUpdateMessage.Type.STARTING)
            {
                // TODO starting the game!
            }
            SwingUtilities.invokeLater(new Runnable() {

                public void run()
                {
                    statusLabel.setText(sum.getText());
                }
            });
        }
        else if (m instanceof AnnounceMessage)
        {
            final AnnounceMessage am = (AnnounceMessage) m;
            SwingUtilities.invokeLater(new Runnable() {

                public void run()
                {
                    chatLogArea.append("[SERVER] " + am.getText() + "\n");
                    // automatically scroll down
                    chatLogArea.setCaretPosition(chatLogArea.getDocument().getLength());
                }
            });
        }
        else
        {
            System.err.println("Unknown message type received!");
        }
    }

    public void tellSocketClosed()
    {
        JOptionPane.showMessageDialog(this, "Server disconnected unexpectedly",
                "Connection closed", JOptionPane.WARNING_MESSAGE);
        SwingUtilities.invokeLater(new Runnable() {

            public void run()
            {
                playerListModel.removeAllElements();
                playerList.setEnabled(false);
                chatField.setEnabled(false);
                sendBtn.setEnabled(false);
                statusLabel.setText("Disconnected.");
                chatLogArea.setEnabled(false);
            }
        });
    }

    private void sendChat()
    {
        ChatMessage chm = new ChatMessage(chatField.getText(), ChatMessage.Type.PUBLIC, PreferenceManager.getUsername());
        ch.send(chm);
        SwingUtilities.invokeLater(new Runnable() {

            public void run()
            {
                chatField.setText("");
                sendBtn.setEnabled(false);
            }
        });
    }

    /**
     * Custom window adapter for notifying the server on leaving.
     */
    private class CustomWindowAdapter extends WindowAdapter
    {

        @Override
        public void windowClosing(WindowEvent e)
        {
            ch.send(new GoodbyeMessage(PreferenceManager.getUsername()));
        }

    }
}
